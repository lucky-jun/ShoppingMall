<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans.xsd 
      http://www.springframework.org/schema/context 
      http://www.springframework.org/schema/context/spring-context-3.0.xsd
      http://www.springframework.org/schema/aop
	  http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	  http://www.springframework.org/schema/tx
	  http://www.springframework.org/schema/tx/spring-tx.xsd">
	
<!-- 	在使用 use-default-filters 属性时要分清楚需要扫描哪些包，是不是需要使用默认的 Filter 进行扫描。
		即 use-default-filters="false" 需要和 context:include-filter 一起使用
		而不能和 context:exclude-filter 属性一起使用。 -->
	<!-- 注意： 不能有中文空格 -->
<!-- 1、开启注解扫描包 -->
	<context:component-scan base-package="com.j">
		<!-- 除了控制器controller外,全部扫描 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
<!-- 2、加载jdbc配置文件，配置数据源 -->
	<!--加载配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
	<!--配置Spring的内置连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!--属性注入 -->
		<property name="driverClassName" value="${driverClass}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${user}"></property>
		<property name="password" value="${passWord}"></property>
		<!--连接池最大数据库连接数-->
		<property name="maxActive" value="10"></property>
		<!--最大的空闲数-->
		<property name="maxIdle" value="5"></property>
	</bean>
	
<!-- 3、配置SQLSessionFactory工厂 ,并且加载mapper.xml文件和mybatis的配置文件-->
	<!--sqlSessionFactory配置 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sqlMapconfig.xml"></property>
		<property name="mapperLocations" value="classpath:com/j/mapper/*.xml"></property>
	</bean>
	<!-- 配置dao层扫描-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.j.dao"></property>
	</bean>

<!-- 4、开启注解事务,使用的是XML文件配置 -->
<!-- 使用注解方式 -->
<!-- 1、事务管理器 -->
<!-- 	<bean id="transactionManager" class="org.springframework.jdbc.dataSource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean> -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"></property>
    </bean>
	<!-- 2、将管理器交给spring 
	    	proxy-target-class
    		true:底层强制使用cglib代理
	-->
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"/>
	
	
<!-- 配置连接数据库的核心处理对象 -->
<!--     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       <property name="dataSource" ref="dataSource"></property>
    </bean> -->
    <!-- 配置通知 -->
<!-- 	<aop:config>
		切入点
		<aop:pointcut expression="execution(* com.j.service.impl.*.*(..))" id="txPoin"/>
		映射切点
		<aop:advisor advice-ref="txAdive" pointcut-ref="txPoin"/>
	</aop:config> -->
<!-- 	<tx:advice id="txAdive" transaction-manager="transactionManager">
		<tx:attributes>
			给所有方法添加事务
			<tx:method name="*"/>
			get为前缀的所有方法，只要识读就够了（只是查询语句而已）
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice> -->
</beans>